use std.str

fn read_file(out *Str, path *char) bool {
   let fd = open(path, O_RDONLY, 420)
   if fd < 0 {
      return false
   }

   let statbuf [144]char
   if fstat(fd, &statbuf) < 0 {
      close(fd)
      return false
   }

   out.size = *(&statbuf as *int + 48 as *int)
   out.data = mmap(0 as *char, out.size, PROT_READ, MAP_PRIVATE, fd, 0)
   close(fd)

   return out.data > 0 as *char
}

struct File {
   fd int
   buffer Str
}

const FILE_BUFFER_CAP = 16000

fn file_new(fd int) File {
   let file File
   file.fd = fd
   file.buffer.data = 0 as *char
   return file
}

fn file_from(f *File, fd int) bool {
   if fd < 0 {
      return false
   }

   f.fd = fd
   f.buffer.data = mmap(0 as *char, FILE_BUFFER_CAP, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0)
   if f.buffer.data < 0 as *char {
      return false
   }

   f.buffer.size = 0
   return true
}

fn file_create(f *File, path *char) bool {
   return file_from(f, creat(path, 420))
}

fn file_flush(f *File) {
   if f.buffer.data != 0 as *char {
      write(f.fd, f.buffer.data, f.buffer.size)
      f.buffer.size = 0
   }
}

fn file_close(f *File) {
   file_flush(f)
   munmap(f.buffer.data, FILE_BUFFER_CAP)
   close(f.fd)
}

fn file_write(f *File, data *char, count int) {
   if f.buffer.data == 0 as *char {
      write(f.fd, data, count)
   } else {
      if f.buffer.size + count > FILE_BUFFER_CAP {
         file_flush(f)
      }

      if count >= FILE_BUFFER_CAP {
         write(f.fd, data, count)
      } else {
         memcpy(f.buffer.data + f.buffer.size as *char, data, count)
         f.buffer.size += count
      }
   }
}

fn [<<](f *File, str Str) *File {
   file_write(f, str.data, str.size)
   return f
}

fn [<<](f *File, ch char) *File {
   file_write(f, &ch, 1)
   return f
}

fn [<<](f *File, n int) *File {
   let buf [20]char
   return f << str_from_int(&buf, n)
}

let stdout = file_new(STDOUT)
let stderr = file_new(STDERR)
