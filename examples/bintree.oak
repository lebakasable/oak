use std.io
use std.array

alias Node_Index int

struct Node {
   value int
   left Node_Index
   right Node_Index
}

const NODES_CAP = 1024
let nodes [NODES_CAP]Node
let nodes_count = 1

fn node_new(value Node_Index) Node_Index {
   assert nodes_count < NODES_CAP
   nodes[nodes_count].value = value
   nodes_count += 1
   return nodes_count - 1
}

fn generate_tree_rec(level int) Node_Index {
   if level > 0 {
      let node = node_new(nodes_count)
      nodes[node].left = generate_tree_rec(level - 1)
      nodes[node].right = generate_tree_rec(level - 1)
      return node
   }
   return 0
}

fn invert_tree_rec(root Node_Index) Node_Index {
   if root != 0 {
      let node = node_new(nodes[root].value)
      nodes[node].left = invert_tree_rec(nodes[root].right)
      nodes[node].right = invert_tree_rec(nodes[root].left)
      return node
   }
   return 0
}

fn print_tree_rec(root Node_Index, level int) {
   if root != 0 {
      print_tree_rec(nodes[root].left, level + 1)
      for let i = 0, i < level, i += 1 {
         &stdout << "  "
      }
      &stdout << nodes[root].value << "\n"
      print_tree_rec(nodes[root].right, level + 1)
   }
}

alias Action_Kind int
const (
   ACTION_CALL
   ACTION_HANDLE
   ACTION_RET
)

struct Action {
   kind Action_Kind
   args *int
   args_count int
   args_capacity int
}

fn action_new(kind Action_Kind) Action {
   let action Action
   action.kind = kind
   action.args = 0 as *int
   action.args_count = 0
   action.args_capacity = 0
   return action
}

fn [<<](action Action, arg int) Action {
   *(array_push(&action.args as **char, &action.args_count, &action.args_capacity, sizeof(int)) as *int) = arg
   return action
}

struct Action_Stack {
   data *Action
   count int
   capacity int
}

fn action_stack_new() Action_Stack {
   let stack Action_Stack
   stack.data = 0 as *Action
   stack.count = 0
   stack.capacity = 0
   return stack
}

fn [<<](stack *Action_Stack, action Action) *Action_Stack {
   *(array_push(&stack.data as **char, &stack.count, &stack.capacity, sizeof(Action)) as *Action) = action
   return stack
}

fn action_stack_pop(stack *Action_Stack) Action {
   stack.count -= 1
   return stack.data[stack.count]
}

fn generate_tree_nonrec(level int) Node_Index {
   let counter = 1
   let arg_stack = action_stack_new()
   let ret_stack = action_stack_new()
   &arg_stack << (action_new(ACTION_CALL) << level)
   for arg_stack.count > 0 {
      let action = action_stack_pop(&arg_stack)
      match action.kind {
         ACTION_CALL => {
            let level = action.args[0]
            if level > 0 {
               &arg_stack << (action_new(ACTION_HANDLE) << counter)
               counter += 1
               &arg_stack << (action_new(ACTION_CALL) << (level - 1))
               &arg_stack << (action_new(ACTION_CALL) << (level - 1))
            } else {
               &ret_stack << (action_new(ACTION_RET) << 0)
            }
         }
         ACTION_HANDLE => {
            let ret = node_new(action.args[0])
            let left = action_stack_pop(&ret_stack)
            let right = action_stack_pop(&ret_stack)
            nodes[ret].left = left.args[0]
            nodes[ret].right = right.args[0]
            &ret_stack << (action_new(ACTION_RET) << ret)
         }
      }
   }
   return ret_stack.data[ret_stack.count - 1].args[0]
}

fn invert_tree_nonrec(root Node_Index) Node_Index {
   let arg_stack = action_stack_new()
   &arg_stack << (action_new(ACTION_CALL) << root)
   let ret_stack = action_stack_new()
   for arg_stack.count > 0 {
      let action = action_stack_pop(&arg_stack)
      match action.kind {
         ACTION_CALL => {
            let node = action.args[0]
            if node != 0 {
               &arg_stack << (action_new(ACTION_HANDLE) << nodes[node].value)
               &arg_stack << (action_new(ACTION_CALL) << nodes[node].right)
               &arg_stack << (action_new(ACTION_CALL) << nodes[node].left)
            } else {
               &ret_stack << (action_new(ACTION_RET) << 0)
            }
         }
         ACTION_HANDLE => {
            let ret = node_new(action.args[0])
            let left = action_stack_pop(&ret_stack)
            let right = action_stack_pop(&ret_stack)
            nodes[ret].left = left.args[0]
            nodes[ret].right = right.args[0]
            &ret_stack << (action_new(ACTION_RET) << ret)
         }
      }
   }
   return ret_stack.data[ret_stack.count - 1].args[0]
}

fn print_tree_nonrec(root Node_Index) {
   let stack = action_stack_new()
   &stack << (action_new(ACTION_CALL) << root << 0)
   for stack.count > 0 {
      let action = action_stack_pop(&stack)
      let level = action.args[1]
      match action.kind {
         ACTION_CALL => {
            let node = action.args[0]
            if node != 0 {
               &stack << (action_new(ACTION_CALL) << nodes[node].right << (level + 1))
               &stack << (action_new(ACTION_HANDLE) << nodes[node].value << level)
               &stack << (action_new(ACTION_CALL) << nodes[node].left << (level + 1))
            }
         }
         ACTION_HANDLE => {
            let value = action.args[0]
            for let i = 0, i < level, i += 1 {
               &stdout << "  "
            }
            &stdout << value << "\n"
         }
      }
   }
}

fn main() {
   let tree = generate_tree_nonrec(3)
   print_tree_nonrec(tree)
}
