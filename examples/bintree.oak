use std.io

alias Node_Index int

struct Node {
   value int
   left Node_Index
   right Node_Index
}

const NODES_CAP = 1024
let nodes [NODES_CAP]Node
let nodes_count = 1

fn node_new(value Node_Index) Node_Index {
   assert nodes_count < NODES_CAP
   nodes[nodes_count].value = value
   nodes_count += 1
   return nodes_count - 1
}

fn generate_tree(level Node_Index) Node_Index {
   if level > 0 {
      let node = node_new(nodes_count)
      nodes[node].left = generate_tree(level - 1)
      nodes[node].right = generate_tree(level - 1)
      return node
   }
   return 0
}

fn invert_tree(root Node_Index) Node_Index {
   if root != 0 {
      let node = node_new(nodes[root].value)
      nodes[node].left = invert_tree(nodes[root].right)
      nodes[node].right = invert_tree(nodes[root].left)
      return node
   }
   return 0
}

fn print_tree_rec(root Node_Index, level int) {
   if root != 0 {
      print_tree_rec(nodes[root].left, level + 1)
      for let i = 0, i < level, i += 1 {
         &stdout << "  "
      }
      &stdout << nodes[root].value << "\n"
      print_tree_rec(nodes[root].right, level + 1)
   }
}

alias Action_Kind int
const (
   ACTION_CALL
   ACTION_HANDLE
)

struct Action {
   kind Action_Kind
   root Node_Index
   level int
}

fn print_tree_nonrec(root Node_Index) {
   const STACK_CAP = 1024
   let stack [STACK_CAP]Action
   let stack_count = 0
   stack[stack_count].kind = ACTION_CALL
   stack[stack_count].root = root
   stack[stack_count].level = 0
   stack_count += 1
   for stack_count > 0 {
      assert stack_count < STACK_CAP
      stack_count -= 1
      let action = stack[stack_count]
      match action.kind {
         ACTION_CALL => if action.root != 0 {
            stack[stack_count].kind = ACTION_CALL
            stack[stack_count].root = nodes[action.root].right
            stack[stack_count].level = action.level + 1
            stack_count += 1
            stack[stack_count].kind = ACTION_HANDLE
            stack[stack_count].root = action.root
            stack[stack_count].level = action.level
            stack_count += 1
            stack[stack_count].kind = ACTION_CALL
            stack[stack_count].root = nodes[action.root].left
            stack[stack_count].level = action.level + 1
            stack_count += 1
         }
         ACTION_HANDLE => {
            for let i = 0, i < action.level, i += 1 {
               &stdout << "  "
            }
            &stdout << nodes[action.root].value << "\n"
         }
      }
   }
}

fn main() {
   let tree = generate_tree(3)
   print_tree_nonrec(tree)
}
