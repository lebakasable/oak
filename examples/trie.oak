use std.io
use std.cmd
use std.arena
use examples.fruits

fn usage(f *File) {
   f << "Usage:\n"
   f << "  trie.oak CMD\n\n"
   f << "Commands:\n"
   f << "  help                   Print this help and exit\n"
   f << "  dot                    Generate tree graph\n"
   f << "  complete PREFIX        Suggest prefix autocompletion based on tree\n"
}

const ARGS_CAP = 1024
let args [ARGS_CAP]*char
let args_count int
let args_start int

fn args_push(item *char) {
   assert args_count < ARGS_CAP
   args[args_count] = item
   args_count += 1
}

fn arg_next_cstr(name Str) *char {
   if args_start == argc {
      usage(&stderr)
      &stderr << "\nerror: " << name << " not provided\n"
      exit(1)
   }

   args_start += 1
   return argv[args_start - 1]
}

fn arg_next(name Str) Str {
   return str_from_cstr(arg_next_cstr(name))
}

alias Node_Index int

struct Node {
   end bool
   children [256]Node_Index
}

const NODES_CAP = 1024
let nodes [NODES_CAP]Node
let nodes_count = 1

fn node_new() Node_Index {
   assert nodes_count < NODES_CAP
   nodes_count += 1
   return nodes_count - 1
}

fn insert_text(root Node_Index, text Str) {
   assert root != 0

   if text.size == 0 {
      nodes[root].end = true
      return
   }

   if nodes[root].children[*text.data] == 0 {
      nodes[root].children[*text.data] = node_new()
   }

   insert_text(nodes[root].children[*text.data], str_drop_left(text, 1))
}

let ac_buffer Arena

fn find_prefix(root Node_Index, prefix Str) Node_Index {
   if prefix.size == 0 {
      return root
   }

   if root == 0 {
      return 0
   }

   &ac_buffer << *prefix.data
   return find_prefix(nodes[root].children[*prefix.data], str_drop_left(prefix, 1))
}

fn print_autocompletion(file *File, root Node_Index) {
   if nodes[root].end {
      file_write(file, &ac_buffer.data as *char, ac_buffer.size)
      file << '\n'
   }

   for let i = 0, i < 256, i += 1 {
      if nodes[root].children[i] != 0 {
         &ac_buffer << i as char
         print_autocompletion(file, nodes[root].children[i])
         ac_buffer.size -= 1
      }
   }
}

fn generate_dot(file *File, root Node_Index) {
   for let i = 0, i < 256, i += 1 {
      let child = nodes[root].children[i]
      if child != 0 {
         file << "   Node_" << child << " [label=\"" << i as char << "\"]" << "\n"
         file << "   Node_" << root << " -> Node_" << child << "\n"
         generate_dot(file, child) 
      }
   }
}

fn main() {
   let root = node_new()
   fruits_init()
   for let i = 0, i < FRUITS_CAP, i += 1 {
      insert_text(root, fruits[i])
   }

   let command = arg_next("command")
   if command == "help" {
      usage(&stdout)
      exit(0)
   } else if command == "dot" {
      &stdout << "digraph Trie {\n"
      &stdout << "   Node_" << root << " [label=root]\n"
      generate_dot(&stdout, root)
      &stdout << "}\n"
   } else if command == "complete" {
      let prefix = arg_next("prefix")
      let subtree = find_prefix(root, prefix)
      print_autocompletion(&stdout, subtree)
   } else {
      usage(&stdout)
      &stderr << "\nerror: invalid command '" << command << "'\n"
      exit(1)
   }
}
