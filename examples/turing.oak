use std.io
use std.array

const STATES_COUNT = 3

alias Dir int
const LEFT = -1
const STAY = 0
const RIGHT = 1

struct State {
   expected char
   write char
   dir Dir
   next int
}

fn state_new(expected char, write char, dir Dir, next int) State {
   let state State
   state.expected = expected
   state.write = write
   state.dir = dir
   state.next = next
   return state
}

struct Inst {
   value [STATES_COUNT]State
}

struct Tape {
   data *char
   count int
   capacity int
}

struct Machine {
   tape Tape
   head int
}

fn machine_new(size int) Machine {
   let machine Machine
   machine.tape.data = malloc(size)
   machine.tape.count = size
   machine.tape.capacity = size
   machine.head = 0
   return machine
}

fn machine_execute(machine *Machine, inst Inst, insts_count int) int {
   if machine.head >= machine.tape.count {
      let last_sym = machine.tape.data[machine.tape.count - 1]
      *(array_push(&machine.tape.data, &machine.tape.count, &machine.tape.capacity, sizeof(char))) = last_sym
   }

   for let i = 0, i < STATES_COUNT, i += 1 {
      if machine.tape.data[machine.head] == inst.value[i].expected {
         machine.tape.data[machine.head] = inst.value[i].write
         if machine.head == 0 && inst.value[i].dir < 0 { return insts_count }
         machine.head += inst.value[i].dir
         return inst.value[i].next
      }
   }

   &stderr << "error: unexpected value '" << machine.tape.data[machine.head] << "'\n"
   exit(1)
   return 0
}

fn machine_print(machine *Machine) {
   &stdout << "head: " << machine.head << ", "
   for let i = 0, i < machine.tape.count, i += 1 {
      if i > 0 { &stdout << " -> " }
      &stdout << machine.tape.data[i]
   }
   &stdout << "\n"
}

struct Program {
   machine *Machine
   insts *Inst
   insts_count int
   insts_capacity int
   cur int
}

fn program_new(machine *Machine) Program {
   let program Program
   program.machine = machine
   program.insts = 0 as *Inst
   program.insts_count = 0
   program.insts_capacity = 0
   program.cur = 0
   return program
}

fn [<<](program *Program, inst Inst) *Program {
   *(array_push(&program.insts as **char, &program.insts_count, &program.insts_capacity, sizeof(Inst)) as *Inst) = inst
   return program
}

fn main() {
   let machine Machine
   if argc == 0 {
      machine = machine_new(8)
      srand(time(0 as *int))
      for let i = 0, i < machine.tape.count, i += 1 {
         machine.tape.data[i] = (real_rand()%2) as char + '0'
      }
   } else {
      machine = machine_new(strlen(argv[0]))
      for let i = 0, i < machine.tape.count, i += 1 {
         machine.tape.data[i] = argv[0][i]
      }
   }

   let program = program_new(&machine)
   {
      let inst Inst let i = 0
      inst.value[i] = state_new('0', '1', RIGHT, 2) i += 1
      inst.value[i] = state_new('1', '0', RIGHT, 0) i += 1
      inst.value[i] = state_new('2', '1', RIGHT, 0) i += 1
      &program << inst
   }

   machine_print(program.machine)
   for program.cur < program.insts_count {
      program.cur = machine_execute(program.machine, program.insts[program.cur], program.insts_count)
      machine_print(program.machine)
   }
}
