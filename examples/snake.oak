#!/usr/bin/env -S sh -c 'stty -icanon -echo; oak run examples/snake.oak; stty sane'

use std.io
use std.libc
use std.math

const ROWS = 10
const COLS = 20

alias Cell int
const (
   CELL_EMPTY
   CELL_APPLE
   CELL_SNAKE
)

let cells [ROWS][COLS]Cell

struct Point {
   x int
   y int
}

fn point_new(x int, y int) Point {
   let point Point
   point.x = x
   point.y = y
   return point
}

alias Dir int
const (
   DIR_UP
   DIR_LEFT
   DIR_DOWN
   DIR_RIGHT
)

fn point_step(point *Point, dir Dir) {
   match dir {
      DIR_UP => point.y -= 1
      DIR_LEFT => point.x -= 1
      DIR_DOWN => point.y += 1
      DIR_RIGHT => point.x += 1
      else => assert false
   }

   point.x = emod(point.x, COLS)
   point.y = emod(point.y, ROWS)
}

const SNAKE_CAP = ROWS*COLS
let snake [SNAKE_CAP]Point
let snake_begin = 0
let snake_size = 0

fn snake_add(point Point) {
   if snake_size >= SNAKE_CAP {
      &stdout << "You won!\n"
      exit(0)
   }

   cells[point.y][point.x] = CELL_SNAKE

   snake[(snake_begin + snake_size)%SNAKE_CAP] = point

   snake_size += 1
}

fn snake_del() {
   assert snake_size > 0

   let point = snake[snake_begin]
   cells[point.y][point.x] = CELL_EMPTY

   snake_size -= 1
   snake_begin = (snake_begin + 1)%SNAKE_CAP
}

let head_pos Point
let head_dir Dir
let score = 0

fn display() {
   &stdout << "Score: " << score << "\n"
   for let y = 0, y < ROWS, y += 1 {
      for let x = 0, x < COLS, x += 1 {
         match cells[y][x] {
            CELL_EMPTY => &stdout << '.'
            CELL_APPLE => &stdout << '*'
            CELL_SNAKE => &stdout << '#'
            else => assert false
         }
      }
      &stdout << '\n'
   }
   &stdout << "WASD to move, Q to quit, SPACE to toggle pause\n"
}

fn spawn_apple() {
   let x = rand()%COLS
   let y = rand()%ROWS
   for cells[y][x] != CELL_EMPTY {
      x = rand()%COLS
      y = rand()%ROWS
   }
   cells[y][x] = CELL_APPLE
}

fn spawn_snake(point Point, dir Dir, len int) {
   head_pos = point
   head_dir = dir
   snake_add(point)

   for let i = 1, i < len, i += 1 {
      point_step(&head_pos, head_dir)
      snake_add(head_pos)
   }
}

fn main() {
   srand(time(0 as *int))

   fcntl(STDIN, F_SETFL, fcntl(STDIN, F_GETFL, 0) | O_NONBLOCK)

   spawn_snake(point_new(5, 5), DIR_RIGHT, 3)
   spawn_apple()

   let input char
   let pause = false

   display()
   for true {
      &stdout << "\e[" << ROWS + 2 << "A"
      &stdout << "\e[" << COLS << "D"
      display()

      let ret = read(STDIN, &input, 1)
      if ret == 1 {
         match input {
            'w' => if head_dir != DIR_DOWN { head_dir = DIR_UP }
            'a' => if head_dir != DIR_RIGHT { head_dir = DIR_LEFT }
            's' => if head_dir != DIR_UP { head_dir = DIR_DOWN }
            'd' => if head_dir != DIR_LEFT { head_dir = DIR_RIGHT }
            'q' => exit(0)
            ' ' => pause = !pause
         }
      } else if ret != EAGAIN {
         &stderr << "error: read command failed\n"
         exit(1)
      }

      if !pause {
         point_step(&head_pos, head_dir)

         match cells[head_pos.y][head_pos.x] {
            CELL_SNAKE => {
               &stdout << "You died with score " << score << "\n"
               exit(0)
            }
            CELL_APPLE => {
               snake_add(head_pos)
               score += 1
               spawn_apple()
            }
            CELL_EMPTY => {
               snake_del()
               snake_add(head_pos)
            }
            else => assert false
         }
      }

      for let i = 0, i < 20000000, i += 1 {}
   }
}
